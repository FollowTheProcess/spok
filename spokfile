# This is a spokfile designed to be equivalent to the current
# justfile in the repo root, meant as a realistic example for
# a live project

PROJECT_NAME := "spok"
PROJECT_PATH := "github.com/FollowTheProcess/spok"
PROJECT_BIN := "./bin"
PROJECT_ENTRY_POINT := "./cmd/spok"
COVERAGE_DATA := "coverage.out"
COVERAGE_HTML := "coverage.html"
GORELEASER_DIST := "dist"
COMMIT_SHA := exec("git rev-parse HEAD")
VERSION_LDFLAG := "github.com/FollowTheProcess/spok/cli/cmd.version"
COMMIT_LDFLAG := "github.com/FollowTheProcess/spok/cli/cmd.commit"

# Tidy up dependencies in go.mod and go.sum
task tidy("**/*.go") {
    go mod tidy
}

# Run go generate on all packages
task generate("**/*.go") {
    go generate ./...
}

# Compile the project binary
task build("**/*.go", tidy, generate, fmt) -> "./bin" {
    go build -ldflags="-X {{.VERSION_LDFLAG}}=dev -X {{.COMMIT_LDFLAG}}={{.COMMIT_SHA}}" -o {{.PROJECT_BIN}}/{{.PROJECT_NAME}} {{.PROJECT_ENTRY_POINT}}
}

# Run go fmt on all project files
task fmt("**/*.go") {
    go fmt ./...
}

# Run all project tests
task test("**/*.go") {
    SPOK_INTEGRATION_TEST=true gotest -race ./...
}

# Run all project benchmarks
task bench(fmt) {
    go test ./... -run=None -benchmem -bench .
}

# Lint the project and auto-fix errors if possible
task lint(fmt) {
    golangci-lint run --fix
}

# Calculate test coverage and render the html
task cover("**/*.go") -> (COVERAGE_DATA, COVERAGE_HTML) {
    SPOK_INTEGRATION_TEST=true go test -race -cover -covermode=atomic -coverprofile={{.COVERAGE_DATA}} ./...
    go tool cover -html={{.COVERAGE_DATA}} -o {{.COVERAGE_HTML}}
    open {{.COVERAGE_HTML}}
}

# Print lines of code (for fun)
task sloc() {
    find . -name "*.go" | xargs wc -l | sort -nr | head
}
